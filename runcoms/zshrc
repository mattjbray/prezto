#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...


#====[ Functions ]====

  calc() { echo "$@" | bc -l ; }

#====[ Vim ]====

  export EDITOR=vim

  # c-e in insert mode jumps to end of line
  bindkey "^E" end-of-line

  # c-r in insert mode opens reverse history search
  bindkey "^R" history-incremental-search-backward

  # allow deletion past insertion point
  zle -A .backward-kill-word   vi-backward-kill-word
  zle -A .backward-delete-char vi-backward-delete-char

#====[ Alias for git dotfiles repository ]====

  alias git-dotfiles="git --git-dir=$HOME/.dotfiles.git/ --work-tree=$HOME"

#====[ Aliases ]====

  alias switch-wifi='sudo netctl-auto switch-to'

#====[ ssh-agent ]====

  alias startx='ssh-agent startx'
  alias ssh-add-all='ssh-add ~/.ssh/engine.pem ~/.ssh/id_rsa ~/.ssh/optimor_id_rsa'

#====[ Optimor ]====

  export PATH_OPTIMOR='/opt/optimor'
  export PATH=$PATH_OPTIMOR/bin/inpath:$PATH

  bmenv() {
    if [ $(tmux list-sessions -F '#{session_name}' | grep "^$1$") ]; then
      # session exists
      tmux attach -t $1
    else
      export BMENV=$1 && cd /opt/optimor/src/billmonitor/$1 && tmux new-session -s $1
    fi
  }

  bmvenv() {
    source /opt/optimor/bin/python_envs/$1/bin/activate
    export PYTHONPATH=`pwd`:`pwd`/backend
    export LD_LIBRARY_PATH=`pwd`/engine/cxx/lib
  }

  if [ -n "${BMENV+x}" ]; then
    bmvenv $BMENV
  fi

  alias cookbooks='tmux attach-session -t cookbooks || (cd /opt/optimor/src/optimor-cookbooks && tmux new-session -s cookbooks)'
  alias ap=ansible-playbook

  alias bmdebug='tmux attach-session -t debug || (cd /opt/optimor/src/billmonitor/debug && tmux new-session -s debug)'
  alias bmfrontend='tmux attach-session -t frontend || (cd /opt/optimor/src/billmonitor-frontend/master && tmux new-session -s frontend)'
  alias tbackend='tmux attach-session -t theia-backend || (cd /opt/optimor/src/billmonitor/theia && tmux new-session -s theia-backend)'
  alias tfrontend='tmux attach-session -t theia-frontend || (cd /opt/optimor/src/theia-frontend/master && tmux new-session -s theia-frontend)'

  alias infab='cat doc/some_fabs.md | grep -iC 2'

#====[ Optimor/Docker ]====
  # run the ansible playbook to open any tunnels and start a mongodb ambassador
  mongodb_ambassador() {
    case $1 in
      dev)
        playbook=mongodb.yml
        ;;
      bmprod)
        playbook=ambassadors/mongodb-bm-prod.yml
        ;;
      tprod)
        playbook=ambassadors/mongodb-theia-prod.yml
        ;;
      tstaging)
        playbook=ambassadors/mongodb-theia-staging.yml
        ;;
      *)
        echo "valid args are: dev, tprod, tstaging"
        return 1
        ;;
    esac
    (cd /opt/optimor/src/optimor-cookbooks/ansible && ansible-playbook -i dev playbooks/dev/$playbook)
  }

  # usage: backend_bash <mongodb_ambassador> [<docker_args>...]
  backend_bash() {
    mongo_env=$1

    # any other args will be passed to docker run
    shift

    case $mongo_env in
      dev)
        mongodb=mongodb_dev
        xpra_port=10000
        extra_args=(-p 8000:8000)
        bm_env=development
        ;;
      bmprod)
        mongodb=mongodb_bm_prod
        xpra_port=10001
        bm_env=bm_debug
        ;;
      tprod)
        mongodb=mongodb_theia_prod
        xpra_port=10002
        bm_env=production
        ;;
      tstaging)
        mongodb=mongodb_theia_staging
        xpra_port=10003
        bm_env=staging
        ;;
      *)
        echo "valid args are: dev, bmprod, tprod, tstaging"
        return 1
        ;;
    esac

    name=backend-bash-$mongodb

    if [[ -n $(docker ps -a | grep "\<$name\>") ]]; then
      # exec bash in existing container
      docker start $name
      set -x
      docker exec -it $name bash
      set +x
    else
      # start mongodb/open tunnel
      mongodb_ambassador $mongo_env

      # create new container
      set -x
      # use the $debian_chroot var to display the mongodb name in the prompt
      docker run -it --rm \
                 --name $name \
                 -e BM_ENV=$bm_env \
                 --link $mongodb:mongodb \
                 -v $(pwd):/opt/optimor/src/billmonitor/theia_backend \
                 -v /opt/optimor/var:/opt/optimor/var \
                 -v /opt/optimor/var/log:/opt/optimor/var/log \
                 -v /tmp/.X11-unix:/tmp/.X11-unix:ro \
                 -e DISPLAY=$DISPLAY \
                 -u optimor \
                 -e debian_chroot=$mongodb \
                 -e PYTHONIOENCODING="utf-8" \
                 $extra_args \
                 "$@" \
                 registry.billmonitor.com:5000/theia_backend_dev bash
      set +x
    fi
  }

  alias compile_engine='set -x; docker run -it --rm -v $(pwd):/host_code registry.billmonitor.com:5000/theia_engine_builder; set +x'
  alias compile_engine_debug='set -x; docker run -it --rm -v $(pwd):/host_code registry.billmonitor.com:5000/theia_engine_builder /bin/bash -c "cd /host_code/engine/cxx && bjam debug"; set +x'

  alias frontend_bash='set -x; docker run -it --rm --name theia-frontend-builder -v $(pwd):/host_code -p 9000:9000 -p 35729:35729 -e DOCKER_USER_ID=$(id -u) -e DOCKER_GROUP_ID=$(id -g) registry.billmonitor.com:5000/theia-frontend-builder /host_code/bin/in_docker/bash_with_host_user; set +x'

  alias docker-run-here='docker run -it --rm -v "$(pwd):$(pwd)" --workdir="$(pwd)"'

#====[ PATH ]====

  export PATH=$HOME/.local/bin:$PATH
  export PATH=$HOME/.cabal/bin:$PATH
  export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting
